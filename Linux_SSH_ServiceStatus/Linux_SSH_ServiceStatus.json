{
  "id" : 71013551,
  "description" : "Linux systemd services via the systemctl command.",
  "group" : "",
  "appliesTo" : "hasCategory(\"Linux_SSH\") || ssh.user && ssh.pass && isLinux()",
  "technology" : "Requires manually modifying active discovery script for auto-discovery to take place.\n\nFlag for manually enabling Active Discovery. Change value to 'true' to auto-discover instances. \n\n'def enableAD = false'\n\nRefer to documentation before editing.",
  "tags" : "service,linux,ssh",
  "checksum" : "bee4a8377177702c2e1b49902b5a0317",
  "lineageId" : "AH-U_uNWQge6TCYN1U_ntg",
  "name" : "Linux_SSH_ServiceStatus",
  "displayName" : "Linux SSH ServiceStatus",
  "version" : 1592230519,
  "auditVersion" : 0,
  "hasMultiInstances" : true,
  "collectInterval" : 300,
  "collectMethod" : "batchscript",
  "collectorAttribute" : {
    "name" : "batchscript",
    "linuxCmdline" : "",
    "linuxScript" : "",
    "groovyScript" : "/*******************************************************************************\n *  © 2007-2020 - LogicMonitor, Inc. All rights reserved.\n ******************************************************************************/\n\nimport com.jcraft.jsch.JSch\nimport com.santaba.agent.util.Settings\n\n// Gather credentials from host -> \nhost = hostProps.get(\"system.hostname\")\nuser = hostProps.get(\"ssh.user\")\npass = hostProps.get(\"ssh.pass\")\nport = hostProps.get(\"ssh.port\") ?: 22\ncert = hostProps.get(\"ssh.cert\") ?: '~/.ssh/id_rsa'\ntimeout = 15000 // timeout in milliseconds\n// <- \n\ndef instance = []\ndef loadstateMap = [:]\ndef substateMap = [:]\ndef activeMap = [:]\ndef ssh_cmd = \"systemctl list-units --type=service\\n\";\ndef output = getCommandOutput(ssh_cmd).readLines()\n\noutput.each {\n\t\n    line->\n\n    String delims = \"[ ]+\";\n    String[] tokens = line.split(delims);\n\n    if (tokens.size() < 4) {\n        return\n    }\n\n    instance = tokens[0].replaceAll(/[:|\\\\|\\s|.|-|=]+|●|├─|└─|├│└─|│/,\"_\").replaceAll(\"UNIT\",\"\").replaceAll(\"LOAD\",\"\").replaceAll(\"ACTIVE\",\"\").replaceAll(\"SUB\",\"\")\n\n    def loadstate = tokens[1]?.replaceAll(\"loaded\",\"0\")\n    if (loadstate.size() > 3) {\n        return\n    }\n\n    def active = tokens[2]?.replaceAll(\"active\",\"0\")\n    if (active.size() > 3 ){\n        return\n    }\n\n    def substate = tokens[3]?.replaceAll(\"running\",\"0\").replaceAll(\"exited\",\"1\")\n    if (substate.size() > 3){\n        return\n    }\n\n    if (instance) {\n        loadstateMap[instance] = loadstate\n        activeMap[instance] = active\n        substateMap[instance] = substate\n    }\n\n}\n\nif (instance) {\n\n    loadstateMap.each { k, v ->\n        println \"${k}.loadstate=\" + v\n    }\n\n    activeMap.each { k, v ->\n        println \"${k}.active=\" + v\n    }\n\n    substateMap.each { k, v ->\n        println \"${k}.substate=\" + v\n    }\n\n}\n\nreturn 0\n\n\ndef getCommandOutput(String input_command) {\n    try {\n        // instantiate JSCH object.\n        jsch = new JSch()\n\n        // do we have an user and no pass ?\n        if (user && !pass) {\n            // Yes, so lets try connecting via cert.\n            jsch.addIdentity(cert)\n        }\n\n        // create session.\n        session = jsch.getSession(user, host, port)\n\n        // given we are running non-interactively, we will automatically accept new host keys.\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        String authMethod = Settings.getSetting(Settings.SSH_PREFEREDAUTHENTICATION, Settings.DEFAULT_SSH_PREFEREDAUTHENTICATION);\n        session.setConfig(\"PreferredAuthentications\", authMethod);\n\n        // set session timeout, in milliseconds.\n        session.setTimeout(timeout)\n\n        // is host configured with a user & password?\n        if (pass) {\n            // set password.\n            session.setPassword(pass);\n        }\n\n        // connect\n        session.connect()\n\n        // execute command.\n        channel = session.openChannel(\"exec\")\n        channel.setCommand(input_command)\n\n        // collect command output.\n        def commandOutput = channel.getInputStream()\n        channel.connect()\n\n        def output = commandOutput.text;\n\n        // disconnect\n        channel.disconnect()\n\n        return output\n    }\n    catch (Exception e) {\n        e.printStackTrace()\n    }\n    // ensure we disconnect the session.\n    finally {\n        session.disconnect()\n    }\n}",
    "scriptType" : "embed",
    "windowsCmdline" : "",
    "windowsScript" : ""
  },
  "enableAutoDiscovery" : true,
  "autoDiscoveryConfig" : {
    "persistentInstance" : true,
    "disableInstance" : false,
    "deleteInactiveInstance" : false,
    "instanceAutoGroupMethod" : "none",
    "instanceAutoGroupMethodParams" : "",
    "scheduleInterval" : 15,
    "method" : {
      "name" : "ad_script",
      "type" : "embeded",
      "winScript" : null,
      "winCmdline" : null,
      "linuxCmdline" : null,
      "linuxScript" : null,
      "groovyScript" : "/*******************************************************************************\r\n *  © 2007-2020 - LogicMonitor, Inc. All rights reserved.\r\n ******************************************************************************/\r\n\r\nimport com.jcraft.jsch.JSch\r\nimport com.santaba.agent.util.Settings\r\n\r\nhost = hostProps.get(\"system.hostname\")\r\nuser = hostProps.get(\"ssh.user\")\r\npass = hostProps.get(\"ssh.pass\")\r\nport = hostProps.get(\"ssh.port\") ?: 22\r\ncert = hostProps.get(\"ssh.cert\") ?: '~/.ssh/id_rsa'\r\n\r\ntimeout = 15000 // timeout in milliseconds\r\n\r\n// Flag for manually enabling Active Discovery. Change value to 'true' to auto-discover instances. \r\ndef enableAD = false\r\n// Refer to documentation and technical notes before changing this value.\r\n\r\ndef instance = []\r\ndef ssh_cmd = \"systemctl list-units --type=service\\n\";\r\ndef output = getCommandOutput(ssh_cmd).readLines()\r\n\r\noutput.each {\r\n\t\r\n    line->\r\n\r\n    String delims = \"[ ]+\";\r\n    String[] tokens = line.split(delims);\r\n\r\n    if (tokens.size() < 4) {\r\n        return\r\n    }\r\n\r\n    instance = tokens[0].replaceAll(/[:|\\\\|\\s|.|-|=]+|●|├─|└─|├│└─|│/,\"_\")\r\n\r\n    if (instance.size() > 7) {\r\n        if (enableAD = true) {\r\n            println \"$instance##$instance##\"\r\n        }\r\n    }\r\n}\r\n\r\nreturn 0\r\n\r\n\r\n\r\ndef getCommandOutput(String input_command) {\r\n    try {\r\n        // instantiate JSCH object.\r\n        jsch = new JSch()\r\n\r\n        // do we have an user and no pass ?\r\n        if (user && !pass) {\r\n            // Yes, so lets try connecting via cert.\r\n            jsch.addIdentity(cert)\r\n        }\r\n\r\n        // create session.\r\n        session = jsch.getSession(user, host, port)\r\n\r\n        // given we are running non-interactively, we will automatically accept new host keys.\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        String authMethod = Settings.getSetting(Settings.SSH_PREFEREDAUTHENTICATION, Settings.DEFAULT_SSH_PREFEREDAUTHENTICATION);\r\n        session.setConfig(\"PreferredAuthentications\", authMethod);\r\n\r\n        // set session timeout, in milliseconds.\r\n        session.setTimeout(timeout)\r\n\r\n        // is host configured with a user & password?\r\n        if (pass) {\r\n            // set password.\r\n            session.setPassword(pass);\r\n        }\r\n\r\n        // connect\r\n        session.connect()\r\n\r\n        // execute command.\r\n        channel = session.openChannel(\"exec\")\r\n        channel.setCommand(input_command)\r\n\r\n        // collect command output.\r\n        def commandOutput = channel.getInputStream()\r\n        channel.connect()\r\n\r\n        def output = commandOutput.text;\r\n\r\n        // disconnect\r\n        channel.disconnect()\r\n\r\n        return output\r\n    }\r\n    catch (Exception e) {\r\n        e.printStackTrace()\r\n    }\r\n    // ensure we disconnect the session.\r\n    finally {\r\n        session.disconnect()\r\n    }\r\n}"
    },
    "filters" : [ ]
  },
  "dataPoints" : [ {
    "id" : 37647,
    "dataSourceId" : 71013551,
    "name" : "LoadState",
    "description" : "Reflects whether the unit definition was properly loaded. Status codes: \n0=ok,\n1=error",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.loadstate",
    "rawDataFieldName" : "output",
    "maxValue" : "1",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : "",
    "adAdvSettingEnabled" : false,
    "warnAdAdvSetting" : "",
    "errorAdAdvSetting" : "",
    "criticalAdAdvSetting" : ""
  }, {
    "id" : 37650,
    "dataSourceId" : 71013551,
    "name" : "ActivationState",
    "description" : "The high-level unit activation state, i.e. generalization of SUB. Status codes:\n0=ok, \n1=error",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.active",
    "rawDataFieldName" : "output",
    "maxValue" : "1",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : "",
    "adAdvSettingEnabled" : false,
    "warnAdAdvSetting" : "",
    "errorAdAdvSetting" : "",
    "criticalAdAdvSetting" : ""
  }, {
    "id" : 37651,
    "dataSourceId" : 71013551,
    "name" : "SubState",
    "description" : "The low-level unit activation state.",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.substate",
    "rawDataFieldName" : "output",
    "maxValue" : "1",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : "",
    "adAdvSettingEnabled" : false,
    "warnAdAdvSetting" : "",
    "errorAdAdvSetting" : "",
    "criticalAdAdvSetting" : ""
  } ],
  "enableEriDiscovery" : false,
  "eriDiscoveryInterval" : -1,
  "eriDiscoveryConfig" : null
}